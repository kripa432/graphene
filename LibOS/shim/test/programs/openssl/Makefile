# Building the manifest for Nginx:
#
# - make                  Building for Linux
# - make DEBUG=1          Building for Linux, with Graphene debug output
# - make SGX=1            Building for SGX
# - make SGX=1 DEBUG=1    Building for SGX, with Graphene debug output
#
# Use `make clean` to remove Graphene-generated files.
#
# Use `make distclean` to further remove the Nginx tarball, source code,
# and installation.

THIS_DIR := $(dir $(lastword $(MAKEFILE_LIST)))
ifeq ($(THIS_DIR), ./)  # workaround Graphene issue #1044 with allowed_files
THIS_DIR :=
endif

INSTALL_DIR ?= $(THIS_DIR)install
OPENSSL_SRC ?= $(THIS_DIR)openssl-1.0.1m
OPENSSL_CHECKSUM ?= f11c2a6dd1d3515736f0324857957db2de98be862461b5a542a3ac6188dbe32b

# Mirrors for downloading the Nginx source code
OPENSSL_MIRRORS ?= \
		   https://www.openssl.org/source/old/1.0.1/

# Address and port for the Nginx server to listen
LISTEN_HOST ?= 127.0.0.1
LISTEN_PORT ?= 8002

# Relative path to Graphene root
GRAPHENEDIR ?= $(THIS_DIR)../../../../..

ifeq ($(DEBUG),1)
GRAPHENEDEBUG = inline
else
GRAPHENEDEBUG = none
endif

.PHONY: all
all: $(INSTALL_DIR)/bin/openssl openssl.manifest pal_loader config testdata
ifeq ($(SGX),1)
all: openssl.manifest.sgx openssl.sig nginx.token
endif

# The make targets for downloading and compiling the Nginx source code, and
# installing the binaries.
# Note that Graphene doesn't support eventfd() and PR_SET_DUMPABLE, so we manually
# overwrite these macros in the autogenerated configuration header of Nginx.
$(INSTALL_DIR)/bin/openssl: $(OPENSSL_SRC)/config
	cd $(OPENSSL_SRC) && ./config --prefix=$(abspath $(INSTALL_DIR))
	cd $(OPENSSL_SRC) && $(MAKE) depend
	cd $(OPENSSL_SRC) && $(MAKE)
	cd $(OPENSSL_SRC) && $(MAKE) install

$(OPENSSL_SRC)/config: $(OPENSSL_SRC).tar.gz
	tar -mxzf $<

$(OPENSSL_SRC).tar.gz:
	for MIRROR in $(OPENSSL_MIRRORS); do \
		wget --timeout=10 $${MIRROR}$(OPENSSL_SRC).tar.gz -O tmp \
		&& break; \
	done
	mv -f tmp $@

# Nginx dependencies (generate from ldd):
#
# For SGX, the manifest needs to list all the libraries loaded during the
# execution, so that the signer can include the file checksums.
#
# The dependencies are generated from the ldd results.

# We need to replace Glibc dependencies with Graphene-specific Glibc. The Glibc
# binaries are already listed in the manifest template, so we can skip them
# from the ldd results
GLIBC_DEPS = linux-vdso /lib64/ld-linux-x86-64 libc libm librt libdl libutil libpthread

openssl.manifest: openssl.manifest.template
	sed -e 's|$$(GRAPHENEDIR)|'"$(GRAPHENEDIR)"'|g' \
		-e 's|$$(GRAPHENEDEBUG)|'"$(GRAPHENEDEBUG)"'|g' \
		-e 's|$$(INSTALL_DIR)|'"$(INSTALL_DIR)"'|g' \
		-e 's|$$(INSTALL_DIR_ABSPATH)|'"$(abspath $(INSTALL_DIR))"'|g' \
		-e 's|$$(OPENSSL_TRUSTED_LIBS)|'"`cat nginx-trusted-libs`"'|g' \
		$< > $@

# Generating the SGX-specific manifest (openssl.manifest.sgx), the enclave signature,
# and the token for enclave initialization.
openssl.manifest.sgx: openssl.manifest
	$(GRAPHENEDIR)/Pal/src/host/Linux-SGX/signer/pal-sgx-sign \
		-libpal $(GRAPHENEDIR)/Runtime/libpal-Linux-SGX.so \
		-key $(GRAPHENEDIR)/Pal/src/host/Linux-SGX/signer/enclave-key.pem \
		-manifest $< -output $@

openssl.sig: openssl.manifest.sgx

nginx.token: openssl.sig
	$(GRAPHENEDIR)/Pal/src/host/Linux-SGX/signer/pal-sgx-get-token \
		-output nginx.token -sig openssl.sig

# Extra executables
pal_loader:
	ln -s $(GRAPHENEDIR)/Runtime/pal_loader $@

# Nginx configuration and test data
#
# The following changes are made in nginx.conf (copied as nginx-graphene.conf):
# - Number of worker processes in increased from 1 to 4
# - Listening port is changed from 80 to LISTEN_PORT
# - Listening host is changed from localhost to LISTEN_HOST
# - Add `daemon off` to run Nginx in the foreground
.PHONY: config
config:
	echo "config"

# HTTP docs:
# Generating random HTML files in $(INSTALL_DIR)/html/random

RANDOM_DIR = $(INSTALL_DIR)/html/random
RANDOM_FILES = \
	$(foreach n,1 2 3 4 5 6 7 8 9 10,2K.$n.html) \
	$(foreach n,1 2 3 4 5,10K.$n.html) \
	$(foreach n,1 2 3 4 5,100K.$n.html) \
	$(foreach n,1 2 3,1M.$n.html) \
	$(foreach n,1 2 3,10M.$n.html) \
	$(foreach n,1 2 3,100.$n.html)

TEST_DATA = $(addprefix $(RANDOM_DIR)/,$(RANDOM_FILES))

$(RANDOM_DIR)/%.html:
	mkdir -p $(RANDOM_DIR)
	dd if=/dev/urandom of=$@ count=1 bs=$(basename $(basename $(notdir $@)))

.PHONY: testdata
testdata: $(TEST_DATA)

# Targets to run Nginx

.PHONY: start-native-server
start-native-server: all
	$(INSTALL_DIR)/sbin/nginx -c conf/nginx-graphene.conf

.PHONY: start-graphene-server
start-graphene-server: all
	./pal_loader openssl.manifest -c conf/nginx-graphene.conf

.PHONY: clean
clean:
	$(RM) *.manifest *.manifest.sgx *.token *.sig pal_loader OUTPUT result-* nginx-ldd tmp

.PHONY: distclean
distclean: clean
	$(RM) -r $(OPENSSL_SRC).tar.gz $(OPENSSL_SRC) $(INSTALL_DIR)
